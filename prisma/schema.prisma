generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  username        String?   @unique
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  bio             String?
  hashedPassword  String?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  // Privacy Settings
  profileVisibility String @default("public") // "public" | "private"
  searchVisibility  Boolean @default(true)
  activityVisibility Boolean @default(true)

  // Notification Settings
  emailNotifications    Boolean @default(true)
  pushNotifications     Boolean @default(true)
  likeNotifications     Boolean @default(true)
  commentNotifications  Boolean @default(true)
  followNotifications   Boolean @default(true)

  accounts Account[]
  sessions Session[]
  pins     Pin[]
  likes    Like[]
  saves    Save[]
  comments Comment[]
  followers Follow[] @relation("UserFollowers")
  following Follow[] @relation("UserFollowing")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Pin {
  id          String   @id @default(cuid())
  title       String
  description String?
  imageUrl    String
  link        String?
  tags        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  creatorId   String

  creator  User      @relation(fields: [creatorId], references: [id], onDelete: Cascade)
  likes    Like[]
  saves    Save[]
  comments Comment[]

  @@index([createdAt])
  @@index([creatorId])
}

model Like {
  id     String @id @default(cuid())
  userId String
  pinId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pin  Pin  @relation(fields: [pinId], references: [id], onDelete: Cascade)

  @@unique([userId, pinId])
}

model Save {
  id     String @id @default(cuid())
  userId String
  pinId  String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pin  Pin  @relation(fields: [pinId], references: [id], onDelete: Cascade)

  @@unique([userId, pinId])
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  userId    String
  pinId     String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  pin  Pin  @relation(fields: [pinId], references: [id], onDelete: Cascade)

  @@index([pinId])
  @@index([createdAt])
}

model Follow {
  id          String @id @default(cuid())
  followerId  String
  followingId String

  follower  User @relation("UserFollowers", fields: [followerId], references: [id], onDelete: Cascade)
  following User @relation("UserFollowing", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
} 